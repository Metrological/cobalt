# Copyright 2021 The Cobalt Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/linux/pkg_config.gni")

declare_args() {
  has_ocdm = getenv("COBALT_HAS_OCDM")
  has_provision = getenv("COBALT_HAS_PROVISION")
  has_waylandsink = getenv("COBALT_HAS_WAYLANDSINK")
  cobalt_data_path = getenv("COBALT_DATA_PATH")
  wpe_staging_dir = getenv("COBALT_STAGING_DIR")
  is_video_overlay = false
}

pkg_config("pkg_libs") {
  packages = [
    "WPEFrameworkCore",
    "WPEFrameworkDefinitions",
    "WPEFrameworkPlugins",
    "compositorclient",
    "WPEFrameworkDeviceInfo",
    "gstreamer-1.0",
    "gstreamer-app-1.0",
    "gstreamer-base-1.0",
    "gstreamer-video-1.0",
    "gstreamer-audio-1.0",
    "glib-2.0",
    "gobject-2.0",
  ]
  if (has_ocdm == "1") {
    packages += [ "ocdm" ]
  }
}

group("pkg_libs_grp") {
  public_configs = [ ":pkg_libs" ]
}

config("platform_configuration") {
  ldflags = [ 
    "-Wl,--wrap=eglGetDisplay"
  ]
  cflags = []
  if (has_ocdm == "1") {
    cflags += [
      "-DHAS_OCDM=1",
    ]
  }
  if (has_provision == "1") {
    cflags += [
      "-DHAS_PROVISION=1",
    ]
    ldflags += [
      "-Wl,--whole-archive",
      "-lWPEFrameworkProvisionProxy",
      "-lprovision",
      "-Wl,--no-whole-archive",
    ]
  }
  if (has_waylandsink == "1") {
    ldflags += [
      "-lgstwayland-1.0"
    ]
  }
  if (cobalt_data_path != "") {
    cflags += [
      "-DCOBALT_DATA_PATH=\"${cobalt_data_path}\"",
    ]
  }
}

config("compiler_flags") {
  cflags = []
  cflags_c = []
  cflags_cc = []
  defines = []
  ldflags = []

  defines += [
    # Cobalt on Linux flag
    "COBALT_LINUX",
    "__STDC_FORMAT_MACROS",  # so that we get PRI*
    "_GNU_SOURCE=1",
    "STARBOARD_IMPLEMENTATION"
  ]

  if (is_video_overlay) {
    defines += [
      "SB_NEEDS_VIDEO_OVERLAY_SURFACE=1",
    ]
  }

  if (is_debug) {
    cflags += [ "-O0" ]
  } else if (is_devel) {
    cflags += [ "-O2" ]
  } else {
    cflags += [ "-Wno-unused-but-set-variable" ]
  }

  ldflags += [
    "--sysroot=$wpe_staging_dir",

    # We don't wrap these symbols, but this ensures that they aren't
    # linked in.
    # "-Wl,--wrap=malloc",
    "-Wl,--wrap=calloc",
    # "-Wl,--wrap=realloc",
    # "-Wl,--wrap=memalign",
    "-Wl,--wrap=reallocalign",
    # "-Wl,--wrap=free",
    "-Wl,--wrap=strdup",
    "-Wl,--wrap=malloc_usable_size",
    "-Wl,--wrap=malloc_stats_fast",
    "-Wl,--wrap=__cxa_demangle",

    # Cleanup unused sections
    "-Wl,-gc-sections",
    # "-Wl,--unresolved-symbols=ignore-in-shared-libs",
  ]

  cflags += [
    "-D__linux__",

    # Force char to be signed.
    "-fsigned-char",

    # Disable strict aliasing.
    "-fno-strict-aliasing",

    # To support large files
    "-D_FILE_OFFSET_BITS=64",
    "-DEGL_NO_X11",

    # Suppress some warnings that will be hard to fix.
    "-Wno-unused-local-typedefs",
    "-Wno-unused-result",
    "-Wno-unused-function",
    "-Wno-deprecated-declarations",
    "-Wno-missing-field-initializers",
    "-Wno-extra",
    "-Wno-comment",
    "-Wno-narrowing",
    "-Wno-unknown-pragmas",
    "-Wno-type-limits",
    "-Wno-unused-parameter",
    "-Wno-expansion-to-defined",
    "-Wimplicit-fallthrough=0",
    "-Wno-ignored-qualifiers",
    "-Wno-error=class-memaccess",
    "-Wno-error=deprecated-copy",
    "-Wno-unused-variable",

    # Specify the sysroot with all your include dependencies.
    "--sysroot=$wpe_staging_dir",
  ]

  if (!cobalt_fastbuild && (is_debug || is_devel)) {
    cflags += [ "-g" ]
  }

  cflags_c += [ 
    "-std=c11", 
  ]
  cflags_cc += [
    "-std=gnu++14",
    "-Wno-literal-suffix",

    # Generated by Audio Renderer and Audio Sink implementations.
    "-Wno-reorder",

    # Generated by third_party quic. (gcc 11.3)
    "-Wno-invalid-offsetof", 

    # Generated by MemorySettingType. (gcc 11.3)
    "-Wno-pessimizing-move",
  ]
}

config("speed") {
  cflags = [ "-O2" ]

  if (is_qa || is_gold) {
    cflags += [
      # Compile symbols in separate sections
      "-ffunction-sections",
      "-fdata-sections",
    ]
  }
}

config("size") {
  cflags = [ "-Os" ]

  if (is_qa || is_gold) {
    cflags += [
      # Compile symbols in separate sections
      "-ffunction-sections",
      "-fdata-sections",
    ]
  }
}

config("pedantic_warnings") {
  cflags = [
    "-Wall",
    "-Wextra",
    "-Wunreachable-code",
    "-Wno-maybe-uninitialized",
    "-Werror",
    "-Wno-expansion-to-defined",
    "-Wno-implicit-fallthrough",
  ]
}

config("no_pedantic_warnings") {
  cflags = [
    # Do not warn for implicit type conversions that may change a value.
    "-Wno-conversion",
  ]
}

